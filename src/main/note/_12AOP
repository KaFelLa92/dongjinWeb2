[ 객체지향 프로그래밍 : OOP ]
    객체들이 서로 상호작용(2개 이상의 객체가 작용. ex : MVC)하여 프로그래밍 방식

[ 관점지향 프로그래밍 : AOP ]
    핵심 로직과 공통적인 관심사를 분리하여 관리하는 프로그래밍 방식
    1. 목적 : 핵심 로직(서비스)은 그대로 유지하고, 공통 기능은 한 곳에서 관리 (유지보수/확장성)
    2. 공통기능
        1) 로그 처리(오류, 예외처리, 보안 관련 추적)
        2) 트랜잭션 (SQL 시작/종료)
        3) 성능(시간)평가
        4) 보안(인증, 권한)
    3. 사용법
        1) 설치 : implementation 'org.springframework.boot:spring-boot-starter-web'
        2) AOP 커스텀 클래스
            @Aspect         : AOP 클래스임을 명시
            @Component      : 스프링 빈 등록
            class AopClass{ }
        3) AOP 커스텀 클래스내 공통함수 정의
            @Before         : 메소드 실행 전              | 권한 검사 용도
            @After          : 메소드 실행 후              | 로그 용도 , DB 연동 해제
            @AfterReturning : 메소드 정상 종료 후 반환값    | 반환값 기록
            @Around         : 메소드 실행 전후 모두        | 성능평가
        4) execution 규칙
            (1) 리턴 타입 지정
                execution( * ) : 모든 리턴 타입의 메소드들
                execution( boolean ) : 모든 리턴 타입의 메소드들
            (2) 클래스/메소드 경로 지정
                execution( * AopService ) : 같은 패키지
                execution( * example.day09.AopService ) : 다른 패키지 ( * Java 이하 경로)
            (3) 메소드 지정
                execution( * example.day09.AopService.* ) : 해당 클래스내 메소드에 적용
                execution( * example.day09.AopService.enter1(..) ) : .enter1 : 해당 클래스내 enter1에만 적용
            (4) 매개변수 지정 * 바인딩
                execution( * example.day09.AopService.enter1(..) ) : 모든 매개변수를 갖는 메소드만 적용
                execution( * example.day09.AopService.enter1( int , boolean ) && args( age , check) ) : 지정한 매개변수를 갖는 메소드만 적용
            (5) 리턴 지정 , @AfterReturning( value="execution( boolean * )" , returning = "int" )
        5) @Around
            (1) @Around
                Object method( ProceedingJoinPoint joinPoint) {}
            (2) ProceedingJoinPoint
                .getSignature() : 해당 공통기능 사용하는 핵심로직함수 확인
                .getArgs()      : 핵심로직함수가 사용하는 매개변수의 인자값들(배열)* 확인
                .proceed();     : 핵심로직함수 직접 실행 후 반환값 받을 수 있다.
                    - Object result = joinPoint.proceed();
    4. AOP 사용하는 주요 어노테이션
        1) @Transactional       : JDBC에서 SQL 시작과 끝 하나의 로직 만드는 메소드
        2) @Log4j2              :
        3) 스프링 시큐리티         :

[ 트랜잭션 ]
    1. 데이터베이스에서 여러 연산(DML)을 하나의 논리적인 작업 단위로 묶은 것
        - 이체 , 주문 , 등록 등등 , 즉] 여러 insert/update/delete/select 등을 하나의 논리로 묶어서, 서비스 처리
    2. 목적 : 신뢰성과 안정성 보장
        * 데이터 무결성 보장 : 여러 연산 중 하나라도 실패하면 전체를 실패 처리한다
        1) 원자성 보장 : 여러 연산이 모두 성공해야만 결과를 반영한다.
        2) 일관성 유지 : 트랜잭션 이후 데이터는 항상 일관된 상태여야한다.
        3) 독립성/격리성 : 다른 트랜잭션과 영향을 받지 않는다.
        4) 지속성 : 트랜잭션이 성공적으로 완료되면 결과는 영구적이다.
    3. 핵심용어
        1) Transaction : 트랜잭션
        2) commit : 트랜잭션이 정상 처리되어 최종 완료되었음을 의미
        3) rollback : 트랜잭션 중 오류 발생하여 이전 상태로 되돌렸음을 의미
        4) savepoint : 특정 시점까지의 작업을 임시저장하여 부분 롤백한다는 의미
    4. 스프링(자바)에서 트랜잭션 적용 방법 , AOP 포함
        * 비즈니스 로직(service)에서 주로 적용된다.
        방법1) @Transactional void method(){}
        방법2) @Transactional class Service{}
    5. 롤백 작용 기준
        * RuntimeException 실행 예외 발생해야만 롤백이 된다.
        1) @Transactional( rollbackFor = Exception.class )
        2) @Transactional( rollbackFor = 특정예외클래스명.class )
    6. 동시적 문제


























